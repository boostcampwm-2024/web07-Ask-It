generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  nickname   String   @unique
  created_at DateTime @default(now())

  sessions          Session[]          @relation("UserSessions")
  userSessionTokens UserSessionToken[] @relation("UserTokens")
}

model Session {
  session_id     String   @id @default(uuid())
  title          String
  expired_at     DateTime
  created_at     DateTime @default(now())
  create_user_id Int

  user              User               @relation("UserSessions", fields: [create_user_id], references: [user_id])
  userSessionTokens UserSessionToken[] @relation("SessionTokens")
  questions         Question[]         @relation("SessionQuestions")
  replies           Reply[]            @relation("SessionReplies")
  chattings         Chatting[]         @relation("SessionChattings")
}

model UserSessionToken {
  token      String @id @default(uuid())
  user_id    Int?
  session_id String

  user          User?          @relation("UserTokens", fields: [user_id], references: [user_id])
  session       Session        @relation("SessionTokens", fields: [session_id], references: [session_id])
  questions     Question[]     @relation("TokenQuestions")
  questionLikes QuestionLike[] @relation("TokenQuestionLikes")
  replies       Reply[]        @relation("TokenReplies")
  replyLikes    ReplyLike[]    @relation("TokenReplyLikes")
  chattings     Chatting[]     @relation("TokenChattings")
}

model Question {
  question_id       Int      @id @default(autoincrement())
  create_user_token String
  session_id        String
  body              String
  closed            Boolean
  pinned            Boolean
  created_at        DateTime @default(now())

  session         Session          @relation("SessionQuestions", fields: [session_id], references: [session_id])
  createUserToken UserSessionToken @relation("TokenQuestions", fields: [create_user_token], references: [token])
  questionLikes   QuestionLike[]   @relation("QuestionLikes")
  replies         Reply[]          @relation("QuestionReplies")
}

model QuestionLike {
  question_like_id           Int    @id @default(autoincrement())
  create_user_token          String 
  question_id                Int

  question        Question         @relation("QuestionLikes", fields: [question_id], references: [question_id])
  createUserToken UserSessionToken @relation("TokenQuestionLikes", fields: [create_user_token], references: [token])
}

model Reply {
  reply_id                   Int      @id @default(autoincrement())
  create_user_token          String
  session_id                 String
  question_id                Int
  body                       String
  created_at                 DateTime @default(now())

  session         Session          @relation("SessionReplies", fields: [session_id], references: [session_id])
  question        Question         @relation("QuestionReplies", fields: [question_id], references: [question_id])
  createUserToken UserSessionToken @relation("TokenReplies", fields: [create_user_token], references: [token])
  replyLikes      ReplyLike[]      @relation("ReplyLikes")
}

model ReplyLike {
  reply_like_id           Int    @id @default(autoincrement())
  create_user_token       String
  reply_id                Int

  reply           Reply            @relation("ReplyLikes", fields: [reply_id], references: [reply_id])
  createUserToken UserSessionToken @relation("TokenReplyLikes", fields: [create_user_token], references: [token])
}

model Chatting {
  chatting_id       Int      @id @default(autoincrement())
  create_user_token String
  body              String
  created_at        DateTime @default(now())
  session_id        String

  session         Session          @relation("SessionChattings", fields: [session_id], references: [session_id])
  createUserToken UserSessionToken @relation("TokenChattings", fields: [create_user_token], references: [token])
}